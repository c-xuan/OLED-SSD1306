#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Pin_define.h>
#include <Bounce2.h>

#define buttonDown PIN23
#define buttonEnter PIN24
#define buttonUp PIN25
#define DS PIN12
#define STCP PIN11
#define SHCP PIN5
#define LED PIN15

#define SCREEN_WIDTH 128  // OLED 寬度像素
#define SCREEN_HEIGHT 64  // OLED 高度像素

#define OLED_RESET -1        // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C  ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
static const unsigned char PROGMEM logo_bmp[] = {

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFD, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0xFF,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0xBD, 0x03, 0x00, 0x00,
  0x00, 0xC0, 0x7F, 0xBB, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF,
  0xFF, 0x17, 0x00, 0x00, 0x00, 0xD0, 0xF7, 0xFF, 0x3F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0xDB, 0xFF, 0x5F, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xFF, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x78, 0xFD, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xBE, 0xFF, 0xFF, 0xFF, 0x03, 0x00,
  0x80, 0xBD, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xFF,
  0xFF, 0xFF, 0x0F, 0x00, 0x40, 0xDF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
  0x00, 0x80, 0xFB, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0xC0, 0xF7, 0xFF, 0xFF,
  0xFF, 0x1F, 0x00, 0x00, 0x00, 0x40, 0xDF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00,
  0xC0, 0xEE, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0xC0, 0xFD, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x60, 0xFF, 0xFF, 0xFF,
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFA, 0xFF, 0xFF, 0xFF, 0x7F, 0x00,
  0xF0, 0xFD, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x60, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0xB0, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0xFD, 0xFF, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x00, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,
  0x00, 0x78, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFC, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE8, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
  0xB8, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x01, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x7C, 0xFB, 0xFF, 0xFF,
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
  0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFC, 0xFE, 0xFF,
  0xFF, 0xFF, 0xFF, 0x01, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x68, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
  0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xD0, 0xFB, 0xFF, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
  0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x00, 0xD0, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x68, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xB0, 0xFF, 0xFF, 0xFF,
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x00,
  0xD0, 0xFD, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xA0, 0xF7, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0xE0, 0xFB, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0xE0, 0xEF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xC0, 0xBE, 0xFF, 0xFF,
  0xFF, 0x2F, 0x00, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00,
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xC0, 0x7D, 0xFF,
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xF7, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0x00,
  0x00, 0x80, 0xDF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xEF, 0xFB, 0xFF,
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xB7, 0xFF, 0xFF, 0xFF, 0x07, 0x00,
  0x00, 0x7C, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE,
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0xBE, 0xF7, 0xFF, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xEE, 0xFF, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0xF0, 0xBF, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xEB, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0xE0, 0xEE, 0xFE, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0xFF, 0xED, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x77, 0x0F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0x7D, 0xDE, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFB,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0xFF, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0xB2, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA,
  0xAF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x19, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xC8, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

Bounce Down = Bounce();
Bounce Up = Bounce();
Bounce Enter = Bounce();

// 菜單項目
const char* mainMenu[]{ "FAN", "GYR" };
const int numItem = sizeof(mainMenu) / sizeof(mainMenu[0]);

const char* fanMenu[]{ "pig", "Gogyr", "Back" };
const int numFanItem = sizeof(fanMenu) / sizeof(fanMenu[0]);

const char* gyrMenu[]{ "cow", "GoFan", "Back" };
const int numGyrItem = sizeof(gyrMenu) / sizeof(gyrMenu[0]);

bool inFan = false;
bool inGyr = false;
int mainselected = 0;
int entered = -1;

void IC(byte value) {
  digitalWrite(STCP, 0);
  shiftOut(DS, SHCP, MSBFIRST, value);
  digitalWrite(STCP, 1);
}

void btn(int lol) {
  int temp = numItem;
  if (lol == 0) {
    temp--;
  }
  if (mainselected < temp) {
    if (Down.fell()) {
      IC(1);
      mainselected++;
    }
  }
  if (mainselected > 0) {
    if (Up.fell()) {
      IC(1);
      mainselected--;
    }
  }
  if (Enter.fell()) {
    IC(1);
    if (inFan == true) {
      if (mainselected == 0) {
        display.clearDisplay();
        display.drawBitmap(0, 0, logo_bmp, 128, 48, 1);
        display.display();
        delay(3000);
      } else if (mainselected == 1) {
        entered = 1;
      } else {
        entered = -1;
      }
      inFan = false;
    } else if (inGyr == true) {
      if (mainselected == 0) {

      } else if (mainselected == 1) {
        entered = 0;
      } else {
        entered = -1;
      }
      inGyr = false;
    } else {
      entered = mainselected;
    }
    mainselected = 0;
  }
}
void Fan_display(void) {
  inFan = true;
  btn(1);

  display.clearDisplay();
  display.setTextSize(2);    // 設定文字大小
  display.setTextColor(1);   // 1:OLED預設的顏色(這個會依該OLED的顏色來決定)
  display.setCursor(42, 0);  // 設定起始座標
  display.print("FAN");      // 要顯示的字串
  for (int i = 0; i < numFanItem; i++) {
    if (i == mainselected) {
      display.setTextColor(BLACK, WHITE);
    } else {
      display.setTextColor(WHITE);
    }
    display.setCursor(46, 15 + i * 15);  // 每行顯示一個項目
    display.println(fanMenu[i]);
  }
  display.display();  // 要有這行才會把文字顯示出來
}

void Gyr_display() {
  inGyr = true;
  btn(1);

  display.clearDisplay();
  display.setTextSize(2);    // 設定文字大小
  display.setTextColor(1);   // 1:OLED預設的顏色(這個會依該OLED的顏色來決定)
  display.setCursor(42, 0);  // 設定起始座標
  display.print("GYR");      // 要顯示的字串
  for (int i = 0; i < numGyrItem; i++) {
    if (i == mainselected) {
      display.setTextColor(BLACK, WHITE);
    } else {
      display.setTextColor(WHITE);
    }
    display.setCursor(46, 15 + i * 15);  // 每行顯示一個項目
    display.println(gyrMenu[i]);
  }
  display.display();  // 要有這行才會把文字顯示出來
}

void menu_display(void) {
  btn(0);
  display.clearDisplay();
  display.setTextSize(2);    // 設定文字大小
  display.setTextColor(1);   // 1:OLED預設的顏色(這個會依該OLED的顏色來決定)
  display.setCursor(42, 0);  // 設定起始座標
  display.println("Menu");   // 要顯示的字串
  for (int i = 0; i < numItem; i++) {
    if (i == mainselected) {
      display.setTextColor(BLACK, WHITE);
    } else {
      display.setTextColor(WHITE);
    }
    display.setCursor(46, 20 + i * 20);  // 每行顯示一個項目
    display.println(mainMenu[i]);
  }
  display.display();  // 要有這行才會把文字顯示出來
}

void setup() {
  pinMode(LED, OUTPUT);
  pinMode(DS, OUTPUT);
  pinMode(STCP, OUTPUT);
  pinMode(SHCP, OUTPUT);
  IC(0);

  //Up
  Up.attach(buttonUp, INPUT);
  Up.interval(5);
  //Down
  Down.attach(buttonDown, INPUT);
  Down.interval(5);
  //Enter
  Enter.attach(buttonEnter, INPUT);
  Enter.interval(5);

  Serial.begin(9600);
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;  // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(1);
  display.setCursor(42, 0);
  display.print("NKHS");
  display.setCursor(42, 40);
  display.print("C206");
  display.display();
  delay(2000);
}

void loop() {
  Up.update();
  Down.update();
  Enter.update();
  IC(0);
  if (entered == -1)
    menu_display();
  else if (entered == 0)
    Fan_display();
  else if (entered == 1)
    Gyr_display();
}
